一、	实验目的 
    现代操作系统核心特征是进程的并发，因此需要解决进程对处理机使用权的竞争问题。
    为了使系统中各进程能有条不紊地工作，操作系统建立了多级调度机制，在进程调度中，需要通过某种调度策略来选择一个进程使用处理机。 
    本次实验的目的是掌握基本的进程调度算法的原理，编程实现各算法，并模拟单处理机下环境下的进程调度过程。
    通过分析仿真结果，比较和解释各算法的优缺点和适用场景。 
二、   实验内容 
        选择任意编程语言，编程实现进程调度算法中的：先来先服务调度算法、短进程优先调度算法、时间片轮转调度算法和优先级调度算法（抢占式）、高响应比优先调度算法。
        定义多个进程并建立就绪队列，分别使用上述算法模拟单处理机环境下进程的调度过程，最后分析实验结果。
    具体步骤和内容如下： 
        1.	确定 PCB 表的存储结构，如：顺序表、链表、索引表。 
        2.	确定 PCB 中的信息，建议包含但不限于以下信息： 
            	进程 ID：进程的唯一标识 
            	要求执行时间：以秒位单位
            	优先级：静态优先级，优先级调度算法使用
            	响应比：高响应比优点调度算法用
            	进程状态：就绪、阻塞、执行
        3.	编程实现 PCB 表的存储结构及基本操作，如：初始化、插入、删除。 
        4.	设计仿真程序各步骤，例：
            	开始：选择进程调度算法，初始化 PCB 表，系统计时开始（模拟计时）。 
            	在给定的时间创建各进程：申请空白 PCB，（分配系统资源省略），完善 PCB 信息，将 PCB 按调度算法要求插入就绪队列。
            	按调度算法调度各进程：执行改进程，执行程序建议输出体现进程执行过程的信息。
                例：进程 5 开始执行，系统时间第 10 秒进程 5 执行第 1 秒 
                进程 5 执行第 2 秒 
                进程 7 开始执行，系统时间第 12 秒进程 7 执行第 1 秒 
                …… 
                进程 7 执行第 9 秒 
                进程 7 执行完毕，系统时间第 21 秒 
            	进程执行完毕撤销进程：回收 PCB。 
            	输出本次调度过程的评价指标：各进程的周转时间和带权周转时间、平均周转时间和带权周转时间、处理机空闲时间。 
        5.	编程实现不同调度算法下的进程调度过程。 
        6.	分析仿真结果。 
 
实验小贴士： 
1.	充分利用数据结构课程中所学内容建立和管理 PCB 表。 
2.	注意多文件、模块化编程，即 PCB 表数据结构的封装、调度算法的封装等。 
3.	设计友好的交互方式控制仿真过程和显示仿真结果。 
4.	首先理清思路，绘制流程图，再进行程序编写。 
5.	为了能够得到使算法的特征更明显的仿真结果，在创建进程时，需要考虑将能够影响调度的进程信息设定得更合理。如：短进程优先调度算法测试时， 需要有所需执行时间区分较大的进程。 
