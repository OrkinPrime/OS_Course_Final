一、实验目的: 
    假定系统中任一资源在每一时刻只能由一个进程使用，任何进程不能抢占其它进程正在占有的资源，当进程得不到资源时，必须等待。
    因此，只要资源分配策略能保证不出现循环等待，系统就不会发生死锁。 
    编写和调试系统动态分配资源的仿真程序，
    采用适当的算法防止和避免死锁发生。 
二、实验内容: 
    模拟资源分配算法。
    在资源分配的过程中加入银行家算法， 
    要求： 
        1.设计有 M 个并发进程共享 N 类资源的系统，各进程通过多次资源申请获得所需资源，执行完毕后一次性释放所获得的所有资源。 
        2.确定一组进程依次进行申请资源的序列，使用银行家算法实现分配流程。 
    提示： 
        1.进程和进程控制块设计 
            仅需要考虑进程状态：
                执行——已获得资源的最大需求量 
                阻塞——尚未获得资源的最大需求量 
        把各进程资源分配情况记录在进程控制块中。
            进程控制块 PCB 的格式建议如下： 
                进程 PID 
                链接指针 
                当前申请量 
                资源需求总量 
                已占资源量 
                进程状态 
            可定义阻塞队列：
                        一般阻塞队列——无资源申请
                        资源申请队列——需要资源申请
        2.	资源分配流程建议： 
            a)	创建 N 类资源，系统资源持有数量； 
            b)	创建 M 个并发进程，按是否有资源申请，分别插入两个阻塞队列； 
            c)	按资源申请队列顺序进行资源申请，分别按随机分配和银行家算法处理资源申请； 
            d)	若申请和分配过程中有新的资源申请发生，将进程从一般阻塞队列取出，插入资源申请队列队尾； 
            e)	若进程获得最大需求量，将进程状态改为执行，输出“进程 xx 执行”，随机执行完毕，撤销进程，继续资源的申请与分配。 
            f)	若出现死锁，程序结束，若阻塞队列为空，程序结束。 
        
        3.	银行家算法方案： 
            a)	针对当前资源分配情况建立算法数据结构； 
            b)	按算法流程判断是否可满足本次申请； 
            c)	若申请资源大于 Need，降低资源申请数量后，将该进程插入资源申请阻塞队列队尾； 
            d)	若资源申请数量大于系统当前资源数，或安全性检测算法未通过，该进程保持当前资源申请状态回到队列队尾； 
            e)	若无法满足资源申请队列所有进程的申请，降低所有进程的资源申请数量后，再次回归申请与分配流程； 
            f)	所有阻塞队列为空，程序结束。 
实验小贴士： 
1.进程 PCB 表和进程队列实现要求同实验二。 
2.注意银行家算法的数据结构和算法的封装。 
3.设计友好的交互方式控制仿真过程和显示仿真结果。 
4.按给出的程序建议步骤，先绘制流程图，再进行程序编写。 
5.为了能够体现银行家算法避免死锁的作用，在设计资源申请时需设计一组必定会使随机分配产生死锁的情况。 
